// SPECTATOR HUD - MP

#include "ui/menudef.h"
#include "ui_mp/common_macro.inc"

#define ONLINEGAME (dvarInt( "onlinegame" ) && !dvarInt( "xblive_privatematch" ) )
#define ONLINEGAME_OFFSET 10
#define HUD_ALPHA 0.65
#define	BOTTOM_RECT_X 0
#define	BOTTOM_RECT_Y 0
#define SPEC_HUD_WIDTH 160

#include "ui_mp/menustyle.inc"
#include "ui_mp/choices_setup_teams.menu"
#include "ui/choices_setup_popmenu.menu"

{
	assetGlobalDef
	{
		fadeClamp		1					// sets the fadeup alpha
		fadeCycle		1					// how often fade happens in milliseconds
		fadeAmount		0.1					// amount to adjust alpha per cycle
	}
	
	// game messages
	menuDef
	{
		name			"spec_gamemessages"
		rect			6 -120 10 10 HORIZONTAL_ALIGN_USER_LEFT VERTICAL_ALIGN_USER_BOTTOM
		fullScreen		0
		visible			1
		visibilityBits	bits( !BIT_IN_KILLCAM BIT_SPECTATING_CLIENT )
		
		itemDef
		{
			rect				0 0 0 0
			exp					rect Y( 0 - (ONLINEGAME * ONLINEGAME_OFFSET) );
			type				ITEM_TYPE_GAME_MESSAGE_WINDOW
			gamemsgwindowindex	0
			gamemsgwindowmode	MODE_BOTTOMUP_ALIGN_BOTTOM
			textfont			UI_FONT_DEFAULT
			textstyle			ITEM_TEXTSTYLE_SHADOWED
			textalign			ITEM_ALIGN_LEFT
			textscale			TEXTSIZE_SMALL
			visible				1
			visibilityBits		bits( !BIT_UI_ACTIVE BIT_HUD_OBITUARIES )
		}
	}

	menuDef
	{
		name			"hud_spectator"
		rect			BOTTOM_RECT_X BOTTOM_RECT_Y 640 480 HORIZONTAL_ALIGN_FULLSCREEN VERTICAL_ALIGN_FULLSCREEN
		exp				rect Y( BOTTOM_RECT_Y - (ONLINEGAME * ONLINEGAME_OFFSET) );
		fullScreen		0
		visible 		1
		visibilityBits	bits( !BIT_IN_KILLCAM !BIT_UI_ACTIVE BIT_SPECTATING_CLIENT BIT_HUD_VISIBLE !BIT_IS_DEMO_PLAYING )
		
		#define SHOULD_SHOW_MAP 0
		#define MAP_X -750
		#define MAP_Y 0
		#define MAP_WIDTH 168
		#define MAP_HEIGHT 188
		#define SHOW_TEXT_ON_MAP 0
		#define MAP_ALPHA 0.7
		#include "ui_mp/tactical_map.inc"
		#undef SHOW_TEXT_ON_MAP
		#undef MAP_ALPHA
		#define TEAM_SCORE_HORIZ_SPACING 5
		#define TEAM_SCORE_VERT_SPACING 3
		#define TEAM_SCORE_HEIGHT 32
		#define TEAM_SCORE_BG_WIDTH (SPEC_HUD_WIDTH/2-TEAM_SCORE_HORIZ_SPACING/2)
		#define TEAM_ICON_VERT_MARGIN 2
		#define TEAM_ICON_HORIZ_MARGIN 5
		#define TEAM_ICON_SIZE (TEAM_SCORE_HEIGHT-TEAM_ICON_VERT_MARGIN*2)
		
		#undef BACKGROUND_H
		#define BACKGROUND_H			20
		
		#undef BACKGROUND_W
		#define BACKGROUND_W			( 5 + BACKGROUND_H + GetTextWidth( player( name ), UI_FONT_SMALL, 0.25 ) + BACKGROUND_H + 5 )
		
		#undef BACKGROUND_X
		#define BACKGROUND_X			(-(BACKGROUND_W/2))
		
		#undef BACKGROUND_Y
		#define BACKGROUND_Y			-70
		
		#define SPEC_ANIM_TIME			200

		#define SPEC_BG_ANIM_STATE							\
				name			"spec_bg"					\
				state										\
				{											\
					name		"update"					\
					forecolor	0 0 0 0.4					\
					onEnter									\
					{										\
						changeState Default SPEC_ANIM_TIME;	\
					}										\
				}

		// Spectator name bar
		PREPROC_SHADER_DRAW_ADV_VIS_EX(	BACKGROUND_X,
										BACKGROUND_Y,
										BACKGROUND_W,
										BACKGROUND_H,
										HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_USER_BOTTOM,
										"white", 0 0 0 0.4,
										1, SPEC_BG_ANIM_STATE )

#ifdef CONSOLE

#define USE_SMALLER_FONT				( dvarInt( loc_language ) != 0 )	// Not english

#ifdef PS3
	#define BUTTON_FONT_SIZE	0.3
	#define BUTTON_Y_OFFSET		( BACKGROUND_Y - 2 )
#else
	#define BUTTON_FONT_SIZE	0.25
	#define BUTTON_Y_OFFSET		BACKGROUND_Y
#endif	//	#ifdef PS3


		// Cycle Previous
		itemDef
		{
			name			"CyclePrev"
			type			ITEM_TYPE_TEXT
			rect			0 BUTTON_Y_OFFSET BACKGROUND_H BACKGROUND_H HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_USER_BOTTOM
			exp				rect X( BACKGROUND_X + 5 )
			textstyle		ITEM_TEXTSTYLE_SHADOWED
			textalign		ITEM_ALIGN_MIDDLE_LEFT
			textfont		UI_FONT_SMALL
			textscale		BUTTON_FONT_SIZE
			forecolor		1 1 1 HUD_ALPHA
			text			"@PLATFORM_FOLLOWPREVPLAYER"
			visible			when( canSpecCycle() && !USE_SMALLER_FONT );
			decoration
			
			state
			{
				name		"Flash"
				forecolor	1 1 1 1
				onEnter
				{
					execnow ui_animate hud_spectator spec_bg update SPEC_ANIM_TIME;
					execnow ui_animate hud_spectator CycleNext update SPEC_ANIM_TIME;
					changeState Default SPEC_ANIM_TIME;
				}
			}

			state							
			{								
				name		"update"		
				forecolor	1 1 1 HUD_ALPHA		
				onEnter						
				{							
					changeState Default SPEC_ANIM_TIME;
				}							
			}
		}
		itemDef
		{
			name			"CyclePrev"
			type			ITEM_TYPE_TEXT
			rect			0 ( BUTTON_Y_OFFSET + 3 ) BACKGROUND_H BACKGROUND_H HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_USER_BOTTOM
			exp				rect X( BACKGROUND_X + 3 )
			textstyle		ITEM_TEXTSTYLE_SHADOWED
			textalign		ITEM_ALIGN_MIDDLE_LEFT
			textfont		UI_FONT_SMALL
			textscale		( BUTTON_FONT_SIZE * 1.5 )
			forecolor		1 1 1 HUD_ALPHA
			text			"@PLATFORM_FOLLOWPREVPLAYER"
			visible			when( canSpecCycle() && USE_SMALLER_FONT );
			decoration
			
			state
			{
				name		"Flash"
				forecolor	1 1 1 1
				onEnter
				{
					execnow ui_animate hud_spectator spec_bg update SPEC_ANIM_TIME;
					execnow ui_animate hud_spectator CycleNext update SPEC_ANIM_TIME;
					changeState Default SPEC_ANIM_TIME;
				}
			}

			state							
			{								
				name		"update"		
				forecolor	1 1 1 HUD_ALPHA		
				onEnter						
				{							
					changeState Default SPEC_ANIM_TIME;
				}							
			}
		}
		
		// Cycle Next
		itemDef
		{
			name			"CycleNext"
			type			ITEM_TYPE_TEXT
			rect			0 BUTTON_Y_OFFSET BACKGROUND_H BACKGROUND_H HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_USER_BOTTOM
			exp				rect X( BACKGROUND_X+BACKGROUND_W-BACKGROUND_H-5 )
			textstyle		ITEM_TEXTSTYLE_SHADOWED
			textalign		ITEM_ALIGN_MIDDLE_RIGHT
			textfont		UI_FONT_SMALL
			textscale		BUTTON_FONT_SIZE
			forecolor		1 1 1 HUD_ALPHA
			text			"@PLATFORM_FOLLOWNEXTPLAYER"
			visible			when( canSpecCycle() && !USE_SMALLER_FONT );
			decoration
			
			state
			{
				name		"Flash"
				forecolor	1 1 1 1
				onEnter
				{
					execnow ui_animate hud_spectator spec_bg update SPEC_ANIM_TIME;
					execnow ui_animate hud_spectator CyclePrev update SPEC_ANIM_TIME;
					changeState Default SPEC_ANIM_TIME;
				}
			}
			
			state							
			{								
				name		"update"		
				forecolor	1 1 1 HUD_ALPHA		
				onEnter						
				{							
					changeState Default SPEC_ANIM_TIME;
				}							
			}
		}	
		
		// Cycle Next
		itemDef
		{
			name			"CycleNext"
			type			ITEM_TYPE_TEXT
			rect			0 ( BUTTON_Y_OFFSET + 3 ) BACKGROUND_H BACKGROUND_H HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_USER_BOTTOM
			exp				rect X( BACKGROUND_X+BACKGROUND_W-BACKGROUND_H-3 )
			textstyle		ITEM_TEXTSTYLE_SHADOWED
			textalign		ITEM_ALIGN_MIDDLE_RIGHT
			textfont		UI_FONT_SMALL
			textscale		( BUTTON_FONT_SIZE * 1.5 )
			forecolor		1 1 1 HUD_ALPHA
			text			"@PLATFORM_FOLLOWNEXTPLAYER"
			visible			when( canSpecCycle() && USE_SMALLER_FONT );
			decoration
			
			state
			{
				name		"Flash"
				forecolor	1 1 1 1
				onEnter
				{
					execnow ui_animate hud_spectator spec_bg update SPEC_ANIM_TIME;
					execnow ui_animate hud_spectator CyclePrev update SPEC_ANIM_TIME;
					changeState Default SPEC_ANIM_TIME;
				}
			}
			
			state							
			{								
				name		"update"		
				forecolor	1 1 1 HUD_ALPHA		
				onEnter						
				{							
					changeState Default SPEC_ANIM_TIME;
				}							
			}
		}		
#endif // #ifdef CONSOLE

		// "SPECTATING" title
		itemDef
		{
			type			ITEM_TYPE_TEXT
			rect			0 (BACKGROUND_Y-4) 1 1 HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_USER_BOTTOM
			exp				rect X( BACKGROUND_X + BACKGROUND_W/2 )
			textstyle		ITEM_TEXTSTYLE_SHADOWED
			textalign		ITEM_ALIGN_BOTTOM_CENTER
			textfont		UI_FONT_EXTRABIG
			textscale		0.27
			forecolor		1 1 1 0.9//HUD_ALPHA
			text			"@MPUI_SPECTATING_CAPS"
			visible			1
			decoration
		}

		// Player name
		itemDef
		{
			name			"SpectatorName"
			type			ITEM_TYPE_TEXT
			rect			0 BACKGROUND_Y SPEC_HUD_WIDTH 20 HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_USER_BOTTOM
			exp				rect X( BACKGROUND_X )
			exp				rect W( BACKGROUND_W )	
			textstyle		ITEM_TEXTSTYLE_SHADOWED
			textalign		ITEM_ALIGN_MIDDLE_CENTER
			textfont		UI_FONT_SMALL
			textscale		0.25
			forecolor		1 1 1 HUD_ALPHA
			exp text		( player( name ) );
			visible			1
			decoration
			
			state
			{
				name		"Flash"
				forecolor	1 1 0 1
				onEnter
				{
					changeState Default 500;
				}
			}
		}

#ifdef CONSOLE
		// 1st Person View Button
		itemDef
		{
			name			"SpecViewToggle"
			type			ITEM_TYPE_TEXT
			rect			0 (BACKGROUND_Y+BACKGROUND_H+10) 1 1 HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_USER_BOTTOM
			exp				rect X( BACKGROUND_X+BACKGROUND_W/2 )
			textstyle		ITEM_TEXTSTYLE_SHADOWED
			textalign		ITEM_ALIGN_TOP_CENTER
			textfont		UI_FONT_NORMAL
			textscale		0.3
			forecolor		1 1 1 HUD_ALPHA
			text			"@PLATFORM_FIRSTPERSON"
			visible			when ( dvarInt( cg_thirdPerson ) == 1 );
			decoration
			
			state
			{
				name		"Flash"
				forecolor	1 1 0 1
				onEnter
				{
					changeState Default 500;
				}
			}
		}
		
		// 3rd Person View Button
		itemDef
		{
			name			"SpecViewToggle"
			type			ITEM_TYPE_TEXT
			rect			0 (BACKGROUND_Y+BACKGROUND_H+10) 1 1 HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_USER_BOTTOM
			exp				rect X( BACKGROUND_X+BACKGROUND_W/2 )
			textstyle		ITEM_TEXTSTYLE_SHADOWED
			textalign		ITEM_ALIGN_TOP_CENTER
			textfont		UI_FONT_NORMAL
			textscale		0.3
			forecolor		1 1 1 HUD_ALPHA
			text			"@PLATFORM_THIRDPERSON"
			visible			when ( ( dvarInt( cg_thirdPerson ) == 0 ) && ( !isVisibilityBitSet( BIT_POF_SPEC_ALLOW_FREELOOK ) || !isVisibilityBitSet( BIT_POF_FOLLOW ) ) );
			decoration
			
			state
			{
				name		"Flash"
				forecolor	1 1 0 1
				onEnter
				{
					changeState Default 500;
				}
			}
		}
		
		// Free Cam Button
		itemDef
		{
			name			"SpecViewToggle"
			type			ITEM_TYPE_TEXT
			rect			0 (BACKGROUND_Y+BACKGROUND_H+10) 1 1 HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_USER_BOTTOM
			exp				rect X( BACKGROUND_X+BACKGROUND_W/2 )
			textstyle		ITEM_TEXTSTYLE_SHADOWED
			textalign		ITEM_ALIGN_TOP_CENTER
			textfont		UI_FONT_NORMAL
			textscale		0.3
			forecolor		1 1 1 HUD_ALPHA
			text			"@PLATFORM_SPEC_FREELOOK"
			visible			when ( dvarInt( cg_thirdPerson ) == 0 );
			visibilityBits	bits( BIT_POF_SPEC_ALLOW_FREELOOK BIT_POF_FOLLOW );
			decoration
			
			state
			{
				name		"Flash"
				forecolor	1 1 0 1
				onEnter
				{
					changeState Default 500;
				}
			}
		}
#endif // #ifdef CONSOLE
	}
}
